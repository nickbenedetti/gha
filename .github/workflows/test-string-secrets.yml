name: Test string secrets

# Test if conditionals/booleans
on: push

jobs:
  test-string-compare:
    runs-on: ubuntu-latest
    env:
      STRING: ${{ secrets.STRING == 'string' }} #true
    steps:
      - uses: actions/checkout@v2
      - name: test
        if: ${{ env.STRING }}
        run: echo "passes!"
  test-if-expressions:
    runs-on: ubuntu-latest
    env:
      ENV_VAR_RAW: ${{ secrets.DEPLOY_TO_DEV_ISTRUE_OR_ISFALSE }}
      ENV_VAR_BOOL_TRUE: ${{ secrets.DEPLOY_TO_DEV_ISTRUE_OR_ISFALSE == 'istrue' }} # true when 'istrue'
      ENV_VAR_BOOL_FALSE: ${{ secrets.DEPLOY_TO_DEV_ISTRUE_OR_ISFALSE == 'isfalse' }}
    steps:
    - uses: actions/checkout@v2
    - name: test_3 # does run when ENV_VAR_RAW 'istrue'
      id: test_3
      if: ${{ env.ENV_VAR_RAW == 'istrue' }}
      run: |
        echo "set job scope env variable as result of secret comparison to string, use that variable as if test to step - ensure true works"
        # --> works!
    - name: test_3dot1 # does not run when ENV_VAR_RAW 'istrue'
      id: test_3dot1
      if: ${{ env.ENV_VAR_RAW == 'isfalse' }}
      run: |
        echo "set job scope env variable as result of secret comparison to string, use that variable as if test to step - ensure false works"
        # --> skips
    - name: test_4
      id: test_4
      shell: bash
      run: |
        echo "true: ${{ true }}" # true: true
        
        if ${{ true }}; then 
          echo "pure true expression" 
          # runs
        fi
        if ${{ false }}; then
          echo "pure false expression"
          # 
        fi
        if [ ${{ env.ENV_VAR_BOOL_TRUE }} = 'true' ]; then
          echo "true expression compares to true string with test"
          # runs
        fi
        if ${{ env.ENV_VAR_BOOL_TRUE }}; then
          echo "pure true expression with env result"
        fi
        if [ ${{ env.ENV_VAR_BOOL_FALSE }} ]; then
          echo "false expression with test"
        fi
        if [ ${{ env.ENV_VAR_BOOL_FALSE }} = 'false' ]; then
          echo "false expression compares to false string with test"
        fi
        if ${{ env.ENV_VAR_BOOL_FALSE }}; then
          echo "pure false expression"
        fi
    - name: test_7
      id: test_7
      if: ${{ env.ENV_VAR_BOOL_TRUE }}
      run: echo "good"    
    - name: test_8
      id: test_8
      if: ${{ env.ENV_VAR_BOOL_FALSE == false }}
      run: echo "bad"
      # Not sure why this didn't run...
  test-true:
    runs-on: ubuntu-latest
    # needs: previous_step which runs the tests...
    env:
      SHOULD_DEPLOY: ${{ secrets.DEPLOY_TO_DEV_ISTRUE_OR_ISFALSE }}
    steps:
    - uses: actions/checkout@v2
    - name: test_1
      id: test_1
      # TODO: Add success(): Returns true when none of the previous steps have failed or been canceled
      # && if merge pr
      if: ${{ env.SHOULD_DEPLOY == 'istrue' }}
      run: | 
        echo "ran!"
        if [ $SHOULD_DEPLOY = "istrue" ]; then
          echo "expression also checks out here"
        elif [ $SHOULD_DEPLOY = "isfalse" ]; then
          echo "Does not check out expression" >&2
        else
          echo "does not compute" >&2
        fi
      shell: bash
  test-false:
    runs-on: ubuntu-latest
    # needs: previous_step which runs the tests...
    env:
      SHOULD_DEPLOY: ${{ 'isfalse' }}
    steps:
    - uses: actions/checkout@v2
    - name: test_1
      id: test_1
      # TODO: Add success(): Returns true when none of the previous steps have failed or been canceled
      # && if merge pr
      if: ${{ env.SHOULD_DEPLOY == 'istrue' }}
      run: | 
        echo "ran!"
        if [ $SHOULD_DEPLOY = "istrue" ]; then
          echo "expression also checks out here"
        elif [ $SHOULD_DEPLOY = "isfalse" ]; then
          echo "Does not check out expression" >&2
        else
          echo "does not compute" >&2
        fi
      shell: bash
    # TODO: Add secrets
  test-true-alt:
    env:
      SHOULD_DEPLOY_BOOL: ${{ secrets.DEPLOY_TO_DEV_TRUE_OR_FALSE }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: string comparison
      # Allow a manual repo-specific override to allow deployment - specifically when 'DEPLOY_TO_DEV_ISTRUE_OR_ISFALSE' secret is set to 'istrue'. 'true' isn't a good secret string because secrets are replaced with '*' characters.
      if: ${{ env.SHOULD_DEPLOY_BOOL == 'true' }}
      run: | 
        echo "string comparison success"
    - name: expression boolean
      # Allow a manual repo-specific override to allow deployment - specifically when 'DEPLOY_TO_DEV_ISTRUE_OR_ISFALSE' secret is set to 'istrue'. 'true' isn't a good secret string because secrets are replaced with '*' characters.
      if: ${{ env.SHOULD_DEPLOY_BOOL }}
      run: | 
        echo "string comparison success"
    - name: straight boolean
      # Allow a manual repo-specific override to allow deployment - specifically when 'DEPLOY_TO_DEV_ISTRUE_OR_ISFALSE' secret is set to 'istrue'. 'true' isn't a good secret string because secrets are replaced with '*' characters.
      if: env.SHOULD_DEPLOY_BOOL
      run: | 
        echo "string comparison success"
